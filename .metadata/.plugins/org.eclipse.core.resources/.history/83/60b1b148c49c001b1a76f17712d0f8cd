package Assignment2;

import java.util.ArrayList;

public class Client {

	static int x = 200;
	
	public final static int SECONDS_TO_MILLISECONDS(double seconds) {
		return (int) seconds * 1000;
	}

	public static void main(String[] args) throws InterruptedException {
		HeavyKnight p1 = new HeavyKnight("Mrs. Richmond", 1);
		Vampire p2 = new Vampire("Mr. Rubin", 2);
		Troll p3 = new Troll("Mr. Selfridge", 3);

		int count = 1;
		int player = 0;
		ArrayList<Warrior> players = new ArrayList<Warrior>();
		players.add(p1);
		players.add(p2);
		// players.add(p3);

		for (boolean isP1Turn = true; players.size() != 1; isP1Turn = !isP1Turn) {
			Thread.sleep(x);
			System.out.printf("<Turn %d>\n\n", count);
			Thread.sleep(x);
			for (Warrior p : players) {
				statUpdate(p);
			}
			System.out.println();

			if (isP1Turn == true) {
				turnCycle(players, 0, 1);
			} else {
				turnCycle(players, 1, 0);
			}

			if (players.size() == 1) {
				System.out.printf("***Player %d won!***", players.get(0).getPlayerNum());
			}
			
//			if (p1.getHealth() <= 0) {
//				System.out.println("***Player 2 has beaten Player 1!***");
//			} else if (p2.getHealth() <= 0) {
//				System.out.println("***Player 1 has beaten Player 2!***");
//			}

			count++;
		}
	}

	public static void statUpdate(Warrior player) {
		System.out.printf("%s (%s): Health = %d, Strength = %d", player.getName(), player.getType(), player.getHealth(),
				player.getStrength());
		if (player.getType() == "HeavyKnight") {
			System.out.printf(", Defense = %d", player.getDefense());
		}
		System.out.println();
	}

	public static void turnCycle(ArrayList<Warrior> players, int playerIndex, int targetIndex)
			throws InterruptedException {
		int atk;
		int playerNum = playerIndex + 1;
		int targetNum = targetIndex + 1;
		Thread.sleep(x);
		if (players.get(playerIndex).getHealth() == 0) {
			System.out.printf("Player %d is out!\n\n", playerIndex + 1);
			players.remove(playerIndex);
		} else {
			if (players.get(playerIndex).findPoisonApple() != 0) {
				int dmg = players.get(playerIndex).getMaxHealth() / 20;
				Thread.sleep(x);
				System.out.printf("*Player %d eats an apple*\n", playerNum);
				Thread.sleep(x);
				System.out.println("It's poisonous!");
				Thread.sleep(x);
				System.out.printf("Player %d took %d damage!\n\n", playerNum, dmg);
			} else if (players.get(playerIndex).findHealingApple() != 0) {
				int heal = players.get(playerIndex).getMaxHealth() / 20;
				Thread.sleep(x);
				System.out.printf("*Player %d eats an apple*\n", playerNum);
				Thread.sleep(x);
				System.out.println("It's edible!");
				Thread.sleep(x);
				System.out.printf("Player %d gained %d health points!\n\n", playerNum, heal);
			}
			if (players.get(playerIndex).attackUp() == true) {
				Thread.sleep(x);
				System.out.printf("Player %d gains resolve!\n", playerNum);
				Thread.sleep(x);
				System.out.printf("Player %d's strength increased by 1!\n\n", playerNum);
			} else if (players.get(playerIndex).attackDown() == true) {
				Thread.sleep(x);
				System.out.printf("Player %d loses resolve!\n", playerNum);
				Thread.sleep(x);
				if (players.get(playerIndex).getStrength() == 1) {
					System.out.printf("Player %d's strength is at 1, and can't go any lower!\n\n", playerNum);
				} else {
					System.out.printf("Player %d's strength decreased by 1!\n\n", playerNum);
				}
			}
			atk = players.get(playerIndex).getAttackRoll(); // Attack
			Thread.sleep(x);
			System.out.printf("Player %d attacks Player %d!\n", playerNum, targetNum);
			Thread.sleep(x);
			System.out.printf("Player %d's attack did %d damage!\n\n", playerNum, atk);
			players.get(targetIndex).damageCalc(atk);
		}
	}
}
